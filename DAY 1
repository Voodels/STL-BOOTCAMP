#include <bits/stdc++.h>
#include <vector>
#include <iostream>

using namespace std;
void prtvec( vector<int> &a){
        
           for(int i= 0;i<a.size();i++){
            cout<<a[i]<<" ";
        }cout<<endl;
}
int main() {
    // cout<<"Hello"<<endl;
        
        vector<int> a;  //declared the vector;

        //initializing vector 'a' 
        for(int i= 0;i<9;i++){
            a.push_back(i);
        }

        //printing vector

        for(int i ; i != a.size(); ++i){
            cout<<a[i]<<" ";
        }
        
        
        cout<<endl;
        
        //printing using 
        
    //     vector<int> :: iterator it;
    //   for(it)
    
    //Size vs Capacity 
    //capacity doubles the size of vector
    
    
    cout<<"\nSize : "<< a.size();
    
    cout<<"\nCapacity : "<< a.capacity();
    
    cout<<"\nMaxsize : "<<a.max_size();
    
    // cout<<"\nResize : "<< a.resize(4);
    
    if(a.empty() == false){
        cout<<"\nnot empty";
    }else{
        cout<<"\nempty";
    }
        
    a.assign(4,7);
    
    for(int i = 0;i<a.size();i++){
        cout<<" "<< a[i];
    }cout<<"\n";
    
    a.push_back(10);
    int n = a.size();
    cout<<"last element is : "<< ""<<a[n-1];
    cout<<endl;
    
    a.pop_back();
        for(int i= 0;i<a.size();i++){
            cout<<a[i]<<" ";
        }cout<<endl;

    //INSERTING ADDING AT THE BEGGIMING
    
    a.insert(a.begin(),3);
        for(int i= 0;i<a.size();i++){
            cout<<a[i]<<" ";
        }cout<<endl;
        
     cout<< "//removing first vector;"<<endl;
    prtvec(a);
    a.erase(a.begin());
    prtvec(a);
    
   cout<< "//clearing the whole vector;"<<endl;
        a.clear();
       cout<<a.size();
        
    //maing multiple vectors of 
    vector<int> a1,a2;
    a1.push_back(3);
    a1.push_back(4);
    a2.push_back(5);    
    a2.push_back(6);    
    
    cout<<"\n vector a1 is ";
     for(int i= 0;i<a1.size();i++){
            cout<<a1[i]<<" ";
        }cout<<endl;
        
    cout<<"\n vector a2 is ";
     for(int i= 0;i<a2.size();i++){
            cout<<a2[i]<<" ";
        }cout<<endl;
        
        //Swaping two vectors 
        a1.swap(a2);
        
    cout<<"\nafter swapping the vectors"<<endl;
    cout<<"\n vector a1 is ";
     for(int i= 0;i<a1.size();i++){
            cout<<a1[i]<<" ";
        }cout<<endl;
        
    cout<<"\n vector a2 is ";
     for(int i= 0;i<a2.size();i++){
            cout<<a2[i]<<" ";
        }cout<<endl;
           
        
        
    //pushing multiple values ''    
        for(int i = 0;i<=10;i++){
            a.push_back(i*10);
        }
        cout<<"\nat : a.at(4) = "<<a.at(4);
        
        
        //front and back 
        cout<<endl;
        
        cout<<"\nfront() : a.front() = "<<a.front();
        // cout<<"\nfront() : a.front() = "<<a.begin();
        
        cout<<"\nback() : a.back() = "<<a.back();
        
        
        
        
        
        
        
        
}
=--=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <utility>

using namespace std;

int main()
{
    // cout<<"Hello World";
    
    //PAIR 
    
    //combining two differnt datattpe values
    pair<int ,char> PAIRNAME;
        
        
        PAIRNAME.first = 100 ;
        PAIRNAME.second = 'C' ;//single quote because char not string
        cout<<"\n"<<PAIRNAME.first<<  " ";
        cout<<"\n"<<PAIRNAME.second<<endl;
        
        
    pair<char,int> pair1 = make_pair('A',1);
    pair<char,int> pair2 = make_pair('B',2);
    
    cout<<"\n Before swapping ;"<<endl;
    cout<<"content of pair1 =";
    cout<<" "<<pair1.first<<" "<<pair1.second;
    cout<<endl;
    cout<<"content of pair2 =";
    cout<<" "<<pair2.first<<" "<<pair2.second;
    cout<<endl;
    
    //
    pair1.swap(pair2);
    //
    
    
    cout<<"\n after swapping ;"<<endl;
    cout<<"content of pair1 =";
    cout<<" "<<pair1.first<<" "<<pair1.second;
    cout<<endl;
    cout<<"content of pair2 =";
    cout<<" "<<pair2.first<<" "<<pair2.second;
        
    return 0;
}

Q/66. Plus One
-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#include <iostream>
#include<stack>

using namespace std;

int main()
{
    // STACK //- last in first out 
    
    stack<int> st;
    st.push(1);
    st.push(2);
    st.push(3);
    st.push(4);
    st.push(5);
    st.pop();
    st.pop();
    st.pop();
    st.pop();
    st.pop();
    cout<<st.size()<<" "<<st.empty()<<" ";
    
    
    return 0;
}

Q/20. Valid Parentheses
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-==--=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-===-=-=-
https://leetcode.com/problems/valid-parentheses/
===============

#include<iostream>
#include<bits/stdc++.h>
#include <vector>

using namespace std;

int main(){

    vector<pair<int,char>>v(5);
    for(int i = 0;i<5;++i){
        v.push_back({i,'a'});
    }
    for(int i = 0;i<5;++i){
        cout<<v[i].first<<" "<<v[i].second<<endl;
    }


    return 0;
}


/* set- collection of same datatype elements 
 sorted in order
 unique elements
 random access not possible

 syntax :

     set<datatype> sr;

functions :
1.insert 
2.emplace
3.size
4.find
5.erase
6.count
7.lower_boud: returns equal or near value (lower or equal) **IF value NOT present both points to the end;** 
8.upper_bound: returns near or greater value (not equal)(strictly greater )
*/

// MULTISETS
/*
similar to sets 
dublicated elements allowed

multiset<datatype>name;
*/
=================================================
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main(){

    set<int>s;
        
        s.insert(1);
        s.insert(2);
        s.insert(1);
        s.insert(18);
        s.insert(7);
        s.insert(1);

        s.emplace(19);//less time complexity

    for(auto &i : s){
        cout<<i<<" ";
    }cout<<endl; 
        //itterators
    cout<<*s.begin()<<" "<<*s.end()<<endl;
    cout<<s.size()<<endl;
    
    s.erase(18);
    for(auto &i : s){
        cout<<i<<" ";
    }

        //another value for loop
        
            for(auto i=s.begin();i!=s.end();i++){
                cout<<*i<<" ";
            }


         //for reversed use = rbegin & rend;

    //FIND
        if(s.find(4) == s.end()){
            cout<<"\nnot present"<<endl;
        }
        else{
            cout<<"\nnot present"<<endl;
        }

        if(s.count(6)==0){
            cout<<"not present";
        }else{
            cout<<"present";
        }
        
    //iterators
        // cout<<endl;
        // auto it = s.lower_bound(1);
        // auto it1 = s.lower_bound(4);
        // cout<<*it<<" "<<*it1<<endl;

        // cout<<endl;
        // auto it = s.upper_bound(1);
        // auto it1 = s.upper_bound(4);
        // cout<<*it<<" "<<*it1<<endl;
    
    multiset<int>ms;
    s.insert(1);
    s.insert(2);
    s.insert(1);
    s.insert(3);
    s.insert(5);

    
        //  for(auto i=s.begin();i!=s.end();i++){
        //         cout<<*i<<" ";
        //     }

    for(auto i = ms.begin();i!=ms.end();i++){
            cout<<*i<<" ";
    }
    return 0;

}

// =====================
// codechef points and lines
// 2540. Minimum Common Value

======================================
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void print(map<int,int> &m){
    cout<<m.size()<<endl;
    for(auto&i : m){//let the for loop decide datatype of i with help of 'auto'   ':  =  scope resolution
        cout<<i.first<<" "<<i.second<<endl;
    }
}

int i=5;

int main(){

                                            /*

                                            MAP
                                            dynamic container 
                                            can contain two different data types
                                            elements are stored in order

                                            syntax:

                                            map<datatype_1,datatype_2>name;
                                                                    
                                            //will be sorted in order by key
                                            
                                            */
        map<int,int>mp1;
        mp1[1] = 2;
        mp1[5] = 5;
        mp1[3] = 6;
        
        mp1.insert({4,6});
        mp1.emplace(6,18);
        mp1.emplace(7,15);
        
            map<int,int>::iterator i;
            //itterators are basically pointers

            // for(i = mp1.begin();i!=mp1.end();i++){
            //     cout<<(*i).first<<" "<<(*i).second<<endl;
            //         //.first  & .second = accesing the pair               
            //     //therefore  *i  derefrencing

        //second way of printing
                //->   /dereferencing not required
                // cout<<i->first<<" "<<i->second<<endl;
        
        //third way 
        
                print(mp1);

            //why * id used or not used in printing


        //FIND
                
                auto it = mp1.find(3);//returns the iterator to the key 3
                if(it==mp1.end()){
                    cout<<"not found";
                }else{
                    cout<<"found";
                }
                
        //Erase 
        
                mp1.erase(3);
                print(mp1);

                // auto it = mp1.find(4);
                // mp1.erase(it);
                // print(mp1);
                
        //COUNT
                
                int cnt = mp1.count(3);
                cout<<cnt<<endl;

        //LOWERBOUND & UPPERBOUND(RETURNS_KEY_HERE)
        auto it1 = mp1.lower_bound(3);
        auto it2 = mp1.upper_bound(3);

        cout<<it1->first<<" "<<it1->second<<endl;
        cout<<it2->first<<" "<<it2->second<<endl;

    return 0;
}

/*
Question.map freq

points and lines 
minimum common value 
first missing positives
longest substring without repeating characters
word pattern

*/

/*
map : red black tress

*/
map // unordered maps 
 |          |
 |          |
 
 ====================================
 Number of Students Unable to Eat Lunch
 #include<iostream>
#include<bits/stdc++.h>
using namespace std;

void print(queue<int>q1){

    while(q1.size()>0)
    {
        cout<<q1.front()<<" ";
        
        q1.pop();

    }

}

int main(){
/*                                  
                                Queue
                    
                    *First in first out principle
                    *Data stored in linear manner

                    Syntax :
                       queue<datatype>name;

                    Functions :
                        1. push()
                        2. pop() -> pops first entered element
                        3. front
                        4. empty
                        5. size

*/
    queue<int>q1;
    q1.push(18);//          pushing elements 
    q1.push(10);//        
    q1.push(1);
    q1.push(11);
    q1.push(13);

    print(q1);

    q1.pop();//18 gets removed
    cout<<endl;  
    print(q1);
    q1.pop();//10 gets removed 
    cout<<endl;  
    print(q1);
    

    //size 

    // q1.pop();
    //     q1.pop();
    //  q1.pop();
    

    cout<<endl;
    cout<<q1.size()<<endl;
    cout<<q1.empty()<<endl;
    
                        //DEQUE
/*
                    
                takes and pops value from both ends of line 
                          ____________________
                         |                    |
                          ____________________

                        push_back  &  push_front
                        pop_back  & 

*/

    return 0;
}

